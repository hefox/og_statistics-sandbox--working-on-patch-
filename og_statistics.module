<?php

/**
 * @file
 *   Logs statistics of the organic group module.
 *
 * @todo
 *   Write more inline comments.
 *   Build a central api function.
 *   Use the abstract api function to remove all this functions,
 *   like og_stat_add_*, og_stat_update_*.
 *
 *   Remove all og_statistics_load in update/add/remove functions, its not needed there.
 *
 *   Make more functions use arrays instaed of single values.
 */

/**
 * Implementation of hook_menu().
 */
function og_statistics_menu() {
  $items = array();
  $items['admin/settings/og_statistics'] = array(
    'title' => 'Og Statistics settings',
    'description' => '',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('og_statistics_settings'),
    'access arguments' => array('administer organic groups'),
    'file' => 'og_statistics.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Implementation of hook_nodeapi().
 */
function og_statistics_nodeapi(&$node, $op, $teaser = NULL, $page = NULL) {
  if (in_array($op, array('insert', 'delete', 'update')) && og_is_group_post_type($node->type) && isset($node->og_groups)) {
    // Delete removes comments without comment delete hook so need to handle it.
    $update = $op == 'delete' ? array('node', 'comment') : array('node');
    foreach ($node->og_groups as $gid) {
      og_statistics_update_group($gid, $update);
    }
  }
  elseif ($op == 'insert' && og_is_group_type($node->type)) {
    og_statistics_update_group($node->nid, array('none'));
  }
  elseif ($op == 'delete' && og_is_group_type($node->type)) {
    og_statistics_delete_record($node->nid);
  }
  elseif ($op == 'load' && og_is_group_type($node->type)) {
    $node->og_statistics = og_statistics_load($node->nid);
  }
}

/**
 * Implementation of hook_comment().
 */
function og_statistics_comment(&$a1, $op) {
  switch ($op) {
    case 'insert':
    case 'delete':
    case 'update':
      $node = node_load($a1['nid']);
      if (og_is_group_post_type($node->type)) {
        foreach ($node->og_groups as $gid) {
          og_statistics_update_group($gid, array('comment'));
        }
      }
      break;
  }
}

/**
 * Implementation of hook_og().
 */
function og_statistics_og($op, $gid, $uid, $args) {
  switch ($op) {
    case 'user insert':
    case 'user delete':
    case 'user approve':
      og_statistics_update_group($gid, array('member'));
      break;
  }
}

/**
 * Returns a statistic for a group().
 *
 * @param $gid
 *   The group nid.
 *
 * @todo
 *   Build perhaps a static cache here.
 *
 */
function og_statistics_load($gid) {
  $result = db_query("SELECT * FROM {og_statistics} WHERE nid = %d", $gid);
  $stats = db_fetch_array($result);
  return !empty($stats) ? $stats : array();
}

/**
 * Removes a complete record.
 *
 * @param $gid
 *   The group nid.
 */
function og_statistics_delete_record($gid) {
  db_query("DELETE FROM {og_statistics} WHERE nid = %d", $gid);
}

/**
 * Recalcs mulitple records.
 *
 * @param $nids
 *  A list of nids to recalc the records.
 */
function og_statistics_recalc($nids = array()) {
  foreach ($nids as $nid) {
    og_statistics_update_group($nid);
  }
}

/**
 * Updates information for a given group.
 *
 * @param $gid
 *   A group NID.
 * @param $limit_update
 *   If set, limits recalculations (member, node, comment, 'none').
 */
function og_statistics_update_group($gid, $limit_update = array()) {
  $original_stats = og_statistics_load($gid);
  $stat = $original_stats + array(
    'nid' => $gid,
    'members_count' => 0,
    'posts_count' => 0,
    'comments_count' => 0,
    'last_node_timestamp' => 0,
    'last_comment_timestamp' => 0,
    'last_member_timestamp' => 0,
    'last_node_nid' => 0,
    'last_node_uid' => 0,
    'last_comment_cid' => 0,
    'last_comment_nid' => 0,
    'last_comment_uid' => 0,
    'last_member_uid' => 0,
  );

  if (empty($limit_update) || in_array('node', $limit_update)) {
    $stat = og_statistics_group_calc_last_node_stats($gid) + $stat;
    $stat['posts_count'] = og_statistics_group_calc_posts_count($gid);
  }

  if (empty($limit_update) || in_array('comment', $limit_update)) {
    $stat = og_statistics_group_calc_last_comment_stats($gid) + $stat;
    $stat['comments_count'] = og_statistics_group_calc_comments_count($gid);
  }

  if (empty($limit_update) || in_array('member', $limit_update)) {
    $stat = og_statistics_group_calc_last_member_stats($gid) + $stat;
    $stat['members_count'] = og_statistics_group_calc_members_count($gid);
  }

  if ($original_stats) {
    drupal_write_record('og_statistics', $stat, 'nid');
  }
  else {
    drupal_write_record('og_statistics', $stat);
  }
}


/**
 * Calculates the amount of members in a group.
 *
 * @param $gid
 *   A group NID.
 *
 * @return
 *   The amount of members in a group.
 */
function og_statistics_group_calc_members_count($gid) {
  $query = "SELECT COUNT(og_statistics_og_uid.uid) FROM {og_uid} og_statistics_og_uid WHERE og_statistics_og_uid.nid = %d";
  if (!variable_get('og_statistics_include_unapproved_members', TRUE)) {
    $query .= " AND og_statistics_og_uid.is_active = 1";
  }
  return db_result(db_query(db_rewrite_sql($query, 'og_statistics_og_uid', 'uid'), $gid));
}

/**
 * Calculates the amount of posts in a group.
 *
 * @param $gid
 *   A group NID.
 *
 * @return
 *   The amount of posts in a group.
 */
function og_statistics_group_calc_posts_count($gid) {
  $query_base = "SELECT COUNT(og_statistics_og_ancestry.nid) FROM {og_ancestry} og_statistics_og_ancestry ";
  $query_where = "WHERE og_statistics_og_ancestry.group_nid = %d";
  if (!variable_get('og_statistics_include_unpublished_nodes', TRUE)) {
    $query_base .= ' INNER JOIN {node} n ON n.nid = og_statistics_og_ancestry.nid ';
    $query_where .= ' AND n.status = 1';
  }
  return db_result(db_query_range(db_rewrite_sql($query_base . $query_where, 'og_statistics_og_ancestry', 'nid'), $gid, 0, 1));
}

/**
 * Calculates the amount of comments in a group.
 *
 * @param $gid
 *   A group NID.
 *
 * @return
 *   The amount of comments in a group.
 */
function og_statistics_group_calc_comments_count($gid) {
  $query_base = "SELECT COUNT(c.cid) FROM {comments} c INNER JOIN {og_ancestry} og_statistics_og_ancestry ON og_statistics_og_ancestry.nid = c.nid ";
  $query_where = "WHERE og_statistics_og_ancestry.group_nid = %d";
  $args = array($gid);

  if (!variable_get('og_statistics_include_unpublished_comments', TRUE)) {
    $query_where .= " AND c.status = %d";
    $args[] = COMMENT_PUBLISHED;
  }

  if (!variable_get('og_statistics_include_unpublished_nodes', TRUE)) {
    $query_base .= ' INNER JOIN {node} n ON n.nid = og_statistics_og_ancestry.nid ';
    $query_where .= ' AND n.status = 1';
  }

  return db_result(db_query_range(db_rewrite_sql($query_base . $query_where, 'og_statistics_og_ancestry', 'nid'), $args, 0, 1));
}

/**
 * Calculates the stats about the last node in group.
 *
 * @param $gid
 *   A group NID.
 *
 * @return
 *   An array including last_node_nid, last_node_timestamp,
 *   and last_node_uid.
 */
function og_statistics_group_calc_last_node_stats($gid) {
  $query = "SELECT n.uid AS last_node_uid, n.nid AS last_node_nid, n.created AS last_node_timestamp FROM {node} n
      INNER JOIN {og_ancestry} og_statistics_og_ancestry ON og_statistics_og_ancestry.nid = n.nid WHERE og_statistics_og_ancestry.group_nid = %d";
  if (!variable_get('og_statistics_include_unpublished_nodes', TRUE)) {
    $query .= ' AND n.status = 1';
  }
  $query .= ' ORDER BY n.created DESC, n.nid DESC';
  $stats = db_fetch_array(db_query(db_rewrite_sql($query, 'og_statistics_og_ancestry', 'nid'), $gid));
  return !empty($stats) ? $stats : array('last_node_uid' => 0, 'last_node_timestamp' => 0, 'last_node_nid' => 0);
}

/**
 * Calculates the stats about the last comment in group.
 *
 * @param $gid
 *   A group NID.
 *
 * @return
 *   An array including last_comment_uid, last_comment_cid,
 *   and last_comment_timestamp.
 */
function og_statistics_group_calc_last_comment_stats($gid) {
  $query_base = "SELECT c.nid AS last_comment_nid, c.uid AS last_comment_uid, c.cid AS last_comment_cid, c.timestamp AS last_comment_timestamp"
    . " FROM {comments} c INNER JOIN {og_ancestry} og_statistics_og_ancestry ON og_statistics_og_ancestry.nid = c.nid";
  $query_where = " WHERE og_statistics_og_ancestry.group_nid = %d ";
  $args = array($gid);

  if (!variable_get('og_statistics_include_unpublished_comments', TRUE)) {
    $query_where .= " AND c.status = %d";
    $args[] = COMMENT_PUBLISHED;
  }

  if (!variable_get('og_statistics_include_unpublished_nodes', TRUE)) {
    $query_base .= ' INNER JOIN {node} n ON n.nid = og_statistics_og_ancestry.nid ';
    $query_where .= ' AND n.status = 1';
  }

  $query_where .= " ORDER BY c.timestamp DESC, c.cid DESC";
  $stats = db_fetch_array(db_query_range(db_rewrite_sql($query_base . $query_where, 'og_statistics_og_ancestry', 'nid'), $args, 0, 1));
  return !empty($stats) ? $stats : array('last_comment_nid' => 0, 'last_comment_uid' => 0, 'last_comment_timestamp' => 0);
}

/**
 * Calculates the stats about the last member in group.
 *
 * @param $gid
 *   A group NID.
 *
 * @return
 *   An array including last_member_timestamp and last_member_uid.
 */
function og_statistics_group_calc_last_member_stats($gid) {
  $query = "SELECT og_statistics_og_uid.created AS last_member_timestamp, og_statistics_og_uid.uid AS last_member_uid FROM {og_uid} og_statistics_og_uid WHERE og_statistics_og_uid.nid = %d";
  if (!variable_get('og_statistics_include_unapproved_members', TRUE)) {
    $query .= " AND og_statistics_og_uid.is_active = 1";
  }
  $query .= ' ORDER BY og_statistics_og_uid.created DESC';
  $stats = db_fetch_array(db_query(db_rewrite_sql($query, 'og_statistics_og_uid', 'nid'), $gid));
  return !empty($stats) ? $stats : array('last_member_timestamp' => 0, 'last_member_uid' => 0);
}

function og_statistics_settings_finished() {
  drupal_set_message('Statistics rebuild successful');
}


/**
 * views stuff.
 */

/**
 * Implementation of hook_views_api().
 */
function og_statistics_views_api() {
  return array(
    'api' => 2,
  );
}

